#!/usr/bin/env node

var guilt = require('..');
var program = require('commander');
var S = require('string');
var colog = require('colog');
var ProgressBar = require('progress');
var util = require('util');
var fs = require('fs');

var packageInfo = require(__dirname + '/../package.json');

program
  .version(packageInfo.version)
  .usage('[options] [<since>] [<until>]\n\t git-guilt [options] [-a|--all] <commit-ish>')
  .option('-e, --email', 'display author emails instead of names')
  .option('-w, --ignore-whitespace', 'ignore whitespace only changes when attributing blame')
  .option('-tty, --force-colored-output', 'Disregard process.stdout.isTTY and colorize output anyway')
  .option('-cmp, --commit-message-path <path>', 'Implies that you want the commit message to have "Suggested reviewers:" added to it.')
  .option('-ccm, --current-commit-message <message>', 'current commit message')
  .option('-head, --since-head', 'use HEAD for `since`')
  .option('-X, --debug', 'output debug information')
  .option('-a, --at', 'display the total blame for the entire repository tree at a particular commit')
  .option('-b, --batch-size <n>', 'specify the number of concurrent blame operations to run (minimum of 2, defaults to 4)', parseInt)
  .option('-d, --dir <path>', 'force git-guilt to run in the specified directory rather than attempt to detect the repository root');

program.parse(process.argv);

var opts = { ...program };

if (opts.debug) {
    opts.logger = console.log;
}

if (opts.dir) {
    opts.repoPath = opts.dir;
}

if (program.at) {
    if (program.args.length === 1) {
        opts.at = program.args[0];
    } else {
        console.error('-a/--at requires a single commit to be specified');
        process.exit(1);
    }
} else {
    if (opts.sinceHead) {
        opts.since = 'HEAD'
    } else {
        switch (program.args.length)
        {
            case 0:
                opts.since = 'HEAD';
                break;
            case 1:
                opts.since = program.args[0];
                break;
            case 2:
                opts.since = program.args[0];
                opts.until = program.args[1];
                break;
            default:
                program.help(); // terminates
        }    
    }
}

if (process.stdout.isTTY && !opts.debug) {
    var progressBar;
    opts.onBlameCount = function(count) {
        progressBar = new ProgressBar('Blaming [:bar] :percent :etas', {
            complete: '+',
            incomplete: '-',
            width: 50,
            total: count,
            clear: true
        });
    };
    opts.onBlameComplete = function() {
        progressBar.tick(1);
    };
}

guilt(opts).then(function(guilt) {
    guilt = Object.entries(guilt);
    guilt.sort(function(a, b) {
        return b[1] - a[1];
    });
    var coloredLogLines = ''
    var uncoloredLogLines = ''
    guilt.forEach(function(entry) {
        var author = entry[0];
        if (author === 'Not Committed Yet') author = 'Brand new code'
        var loc = entry[1];
        // Guarantees we have 3 spaces on right hand side - but - this could be more dynamic
        author = S(author).truncate(20).padRight(23);
        var locStr;

        if (program.at) {
            locStr = loc;
        } else {
            var maxSymbols = 50;
            var symbol = loc > 0 ? '+' : '-';
            if (Math.abs(loc) > maxSymbols) {
                var elipsis = '(' + loc + ')';
                locStr = S(symbol).repeat(maxSymbols - elipsis.length) + elipsis;
            } else {
                locStr = S(symbol).repeat(Math.abs(loc));
            }
        }

        if (process.stdout.isTTY || opts.forceColoredOutput) {
            coloredLogLines += '\n' + author + ' ' + colog.apply(locStr, [loc > 0 ? 'green' : 'red']);
            uncoloredLogLines += '\n' + author + ' ' + locStr;
        } else {
            coloredLogLines += '\n' + author + ' ' + locStr;
            uncoloredLogLines += '\n' + author + ' ' + locStr;
        }
    });
    uncoloredLogLines = uncoloredLogLines.trim()
    console.log(coloredLogLines.trim(), '\n')
    if (opts.commitMessagePath) {
        var prefix = '\n\nSuggested reviewers:\n';
        var msg = opts.currentCommitMessage
        if (msg.includes(prefix)) {
            msg = msg.substring(
                0,
                msg.indexOf(prefix)
            )
        }

        // strip comments from git...
        let commitMessage = msg
            .trim()
            .split('\n')
            .map((line) => {
                // Commit messages can of course contain # sign
                // But lines starting with # at index 0 are comments from git. (git 2.34.1, macOS Big Sir)
                if (line.indexOf('#') === 0) {
                    // comment from git.
                    return false;
                } else {
                    // Don't touch it. Preserve newlines and indents.
                    return line;
                }
            })
            .filter(
                (line) => line !== false,
            )
            .join('\n')
            .trim()

        if (commitMessage === '') {
            console.error('COMMIT MESSAGE IS EMPTY - STOPPING COMMIT')
            process.exit(1)
        }
        commitMessage += prefix
        commitMessage += uncoloredLogLines

        fs.writeFileSync(opts.commitMessagePath, commitMessage)
    }
}).catch(function(err) {
    console.error(err);
    process.exit(1);
});

